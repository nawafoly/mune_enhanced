/* =========================================================
   Storage / Utils / UI Helpers
   ========================================================= */
const $  = (s) => document.querySelector(s);
const $$ = (s) => document.querySelectorAll(s);
const ym = (d) => new Date(d).toISOString().slice(0, 7);
const today = new Date().toISOString().slice(0, 10);

function fmt(n){
  return (Number(n || 0).toLocaleString("ar-EG",{maximumFractionDigits:0}) + " ر.س");
}

function showToast(msg, type=''){
  const t = $("#toast");
  if(!t) return;
  t.className = "toast " + type;
  t.innerHTML = `<div class="box">${msg}</div>`;
  t.style.display = "block";
  clearTimeout(showToast._t);
  showToast._t = setTimeout(()=>{ t.style.display="none"; }, 3000);
}

function getLS(k, f){
  try{ return JSON.parse(localStorage.getItem(k) ?? f); }
  catch{ return JSON.parse(f); }
}
function setLS(k,v){ localStorage.setItem(k, JSON.stringify(v)); }

const K = {
  salary:   "pf_salary",
  saving:   "pf_saving",
  inst:     "pf_inst",
  bills:    "pf_bills",
  exps:     "pf_exps",
  one:      "pf_one",
  paid:     "pf_paid",          // تخزين حالة الدفع per (kind:id:yyyymm) => boolean
  settings: "pf_settings",
  budgets:  "pf_budgets",
  roll:     "pf_rollovers",
};

/* =========================================================
   Compute Helpers
   ========================================================= */
function withinMonthRange(start, end, yyyymm){
  const s = ym(start);
  const e = end ? ym(end) : "9999-12";
  return yyyymm >= s && yyyymm <= e;
}
function prevMonthStr(yyyymm){
  let [y,m] = yyyymm.split("-").map(Number);
  if(m===1){ y--; m=12; } else m--;
  return y + "-" + String(m).padStart(2, "0");
}
function lastDayOfMonth(y,m){ return new Date(y, m, 0).getDate(); }

function daysUntilDue(item, yyyymm){
  const y = +yyyymm.slice(0,4);
  const m = +yyyymm.slice(5,7);
  const last = lastDayOfMonth(y,m);
  const d = Math.min(item.dueDay || last, last);
  const due = new Date(y, m-1, d);
  const one = 86400000;
  return Math.floor((due - new Date())/one);
}

function dueThisMonth(item, yyyymm){
  return withinMonthRange(item.start, item.end, yyyymm) ? Number(item.amount || 0) : 0;
}

/* =========================================================
   Paid State (موحد)
   ========================================================= */
function isPaid(kind, id, yyyymm){
  const map = getLS(K.paid, "{}");
  return !!map[`${kind}:${id}:${yyyymm}`];
}
function setPaid(kind, id, yyyymm, val){
  const map = getLS(K.paid, "{}");
  map[`${kind}:${id}:${yyyymm}`] = !!val;
  setLS(K.paid, map);
}

function statusChip(paid, dueAmt, item, yyyymm){
  if(!dueAmt) return `<span class="chip">—</span>`;
  if(paid)     return `<span class="chip green">✅ مدفوع</span>`;
  const curYM = new Date().toISOString().slice(0,7);
  if(yyyymm < curYM) return `<span class="chip red">⚠️ متأخر</span>`;
  if(yyyymm > curYM) return `<span class="chip blue">⏳ مستقبلي</span>`;
  const d = daysUntilDue(item, yyyymm);
  if(d < 0)   return `<span class="chip red">⚠️ متأخر</span>`;
  if(d <= 3)  return `<span class="chip orange">⏰ قريب الاستحقاق</span>`;
  return `<span class="chip blue">⏳ غير مدفوع</span>`;
}

function priorityKey(kind, item, yyyymm){
  const dueAmt = dueThisMonth(item, yyyymm);
  const paid   = isPaid(kind, item.id, yyyymm);
  const d      = daysUntilDue(item, yyyymm);
  let pri;
  if(dueAmt===0) pri = 5;
  else if(paid)  pri = 4;
  else if(d < 0) pri = 0;
  else if(d<=3)  pri = 1;
  else           pri = 2;

  const y = +yyyymm.slice(0,4), m = +yyyymm.slice(5,7);
  const last = lastDayOfMonth(y,m);
  const day = Math.min(item.dueDay || last, last);
  return [pri, day, item.name || ""];
}

/* =========================================================
   UI Actions (موحدة)
   ========================================================= */
function togglePaid(kind, id, yyyymm){
  const current = isPaid(kind, id, yyyymm);
  setPaid(kind, id, yyyymm, !current);
  showToast(current ? "❌ تم إلغاء تعليم الدفع" : "✅ تم تعليم كمدفوع", current ? "warning" : "success");
  if(kind==='inst') refreshInst();
  if(kind==='bills') refreshBills();
  refreshExp(); refreshOne(); refreshBudgets(); refreshSummary(); refreshCharts(); updateAlerts();
}
window.togglePaid = togglePaid;

function deleteItem(kind, id){
  if(!confirm("هل أنت متأكد من حذف هذا العنصر؟")) return;
  const L = getLS(K[kind], "[]").filter(x=> x.id!=id);
  setLS(K[kind], L);
  showToast("🗑️ تم حذف العنصر بنجاح", "success");
  refreshInst(); refreshBills(); refreshExp(); refreshOne(); refreshBudgets(); refreshSummary(); refreshCharts(); updateAlerts();
}
window.deleteItem = deleteItem;

/* =========================================================
   Forms
   ========================================================= */
function bindForms(){
  // Settings
  if($("#saveSettingsBtn")){
    $("#saveSettingsBtn").onclick = ()=>{
      const salary = +($("#salaryInput")?.value || 0);
      const saving = +($("#savingTargetInput")?.value || 0);
      setLS(K.salary, salary); setLS(K.saving, saving);

      const st = {
        cash: !!$("#cashMode")?.checked,
        auto: !!$("#autoDeduct")?.checked,
        roll: !!$("#rollover")?.checked
      };
      setLS(K.settings, st);
      showToast("✅ تم حفظ الإعدادات بنجاح!", "success");
      refreshAll();
    };
  }
  if($("#applySuggestedBtn")){
    $("#applySuggestedBtn").onclick = ()=>{
      const salary = +getLS(K.salary,"0") || 0;
      const suggested = Math.round(salary * 0.15);
      setLS(K.saving, suggested);
      if($("#savingTargetInput")) $("#savingTargetInput").value = suggested;
      showToast(`💡 تم تطبيق الادخار المقترح: ${fmt(suggested)}`, "success");
      refreshAll();
    };
  }

  // Installments
  if($("#instForm")){
    $("#instForm").onsubmit = (e)=>{
      e.preventDefault();
      const name   = $("#instName")?.value?.trim();
      const amount = +($("#instAmount")?.value || 0);
      const start  = $("#instStart")?.value;
      const end    = $("#instEnd")?.value || null;
      const dueDay = +($("#instDueDay")?.value || 0) || null;

      if(!name || !start){ showToast("⚠️ يرجى ملء الاسم وتاريخ البدء", "warning"); return; }
      if(isNaN(amount) || amount<=0){ showToast("⚠️ مبلغ غير صالح", "warning"); return; }
      if(dueDay!==null && (isNaN(dueDay) || dueDay<1 || dueDay>31)){ showToast("⚠️ يوم استحقاق بين 1 و 31", "warning"); return; }
      if(end && start > end){ showToast("⚠️ تاريخ الانتهاء قبل البدء", "warning"); return; }

      const L = getLS(K.inst, "[]");
      L.push({ id: (crypto.randomUUID?.() || Date.now().toString(36)), name, amount, start, end, dueDay });
      setLS(K.inst, L);
      e.target.reset();
      showToast("✅ تم إضافة القسط بنجاح!", "success");
      refreshInst(); refreshSummary(); refreshCharts();
    };
  }

  // Bills
  if($("#billForm")){
    $("#billForm").onsubmit = (e)=>{
      e.preventDefault();
      const name   = $("#billName")?.value?.trim();
      const amount = +($("#billAmount")?.value || 0);
      const start  = $("#billStart")?.value;
      const end    = $("#billEnd")?.value || null;
      const dueDay = +($("#billDueDay")?.value || 0) || null;

      if(!name || !start){ showToast("⚠️ يرجى ملء الاسم وتاريخ البدء", "warning"); return; }
      if(isNaN(amount) || amount<=0){ showToast("⚠️ مبلغ غير صالح", "warning"); return; }
      if(dueDay!==null && (isNaN(dueDay) || dueDay<1 || dueDay>31)){ showToast("⚠️ يوم استحقاق بين 1 و 31", "warning"); return; }
      if(end && start > end){ showToast("⚠️ تاريخ الانتهاء قبل البدء", "warning"); return; }

      const L = getLS(K.bills, "[]");
      L.push({ id: (crypto.randomUUID?.() || Date.now().toString(36)), name, amount, start, end, dueDay });
      setLS(K.bills, L);
      e.target.reset();
      showToast("✅ تم إضافة الفاتورة بنجاح!", "success");
      refreshBills(); refreshSummary(); refreshCharts();
    };
  }

  // Expenses
  if($("#expForm")){
    $("#expForm").onsubmit = (e)=>{
      e.preventDefault();
      const date   = $("#expDate")?.value;
      const cat    = $("#expCat")?.value?.trim();
      const note   = $("#expNote")?.value?.trim();
      const pay    = $("#expPay")?.value;
      const amount = +($("#expAmount")?.value || 0);

      if(!date || !cat){ showToast("⚠️ أدخل التاريخ والتصنيف", "warning"); return; }
      if(isNaN(amount) || amount<=0){ showToast("⚠️ مبلغ غير صالح", "warning"); return; }

      const L = getLS(K.exps, "[]");
      L.push({ id: (crypto.randomUUID?.() || Date.now().toString(36)), date, cat, note, pay, amount });
      setLS(K.exps, L);
      e.target.reset();
      if($("#expDate")) $("#expDate").value = today;
      showToast("✅ تم إضافة المصروف بنجاح!", "success");
      refreshExp(); refreshBudgets(); refreshSummary(); refreshCharts(); checkBudgetWarn(cat);
    };
  }

  // External expenses
  if($("#oneForm")){
    $("#oneForm").onsubmit = (e)=>{
      e.preventDefault();
      const date   = $("#oneDate")?.value;
      const cat    = $("#oneCat")?.value?.trim();
      const note   = $("#oneNote")?.value?.trim();
      const amount = +($("#oneAmount")?.value || 0);
      const paid   = !!$("#onePaid")?.checked;

      if(!date || !cat){ showToast("⚠️ أدخل التاريخ والنوع", "warning"); return; }
      if(isNaN(amount) || amount<=0){ showToast("⚠️ مبلغ غير صالح", "warning"); return; }

      const L = getLS(K.one, "[]");
      L.push({ id:(crypto.randomUUID?.() || Date.now().toString(36)), date, cat, note, amount, paid });
      setLS(K.one, L);
      e.target.reset();
      if($("#oneDate")) $("#oneDate").value = today;
      showToast("✅ تم إضافة المصروف الخارجي!", "success");
      refreshOne(); refreshSummary(); refreshCharts();
    };
  }

  // Budgets
  if($("#budForm")){
    $("#budForm").onsubmit = (e)=>{
      e.preventDefault();
      const cat   = $("#budCat")?.value?.trim();
      const limit = +($("#budLimit")?.value || 0);
      if(!cat || !limit){ showToast("⚠️ أدخل التصنيف والحد", "warning"); return; }
      let B = getLS(K.budgets, "[]");
      const i = B.findIndex(x => String(x.cat).toLowerCase()===String(cat).toLowerCase());
      if(i>-1){ B[i].limit = limit; showToast("✅ تم تحديث الميزانية!", "success"); }
      else { B.push({ id:(crypto.randomUUID?.() || Date.now().toString(36)), cat, limit }); showToast("✅ تم إضافة الميزانية!", "success"); }
      setLS(K.budgets, B);
      e.target.reset();
      refreshBudgets();
    };
  }
}

/* =========================================================
   Filters / Search / Export
   ========================================================= */
function bindFiltersAndExport(){
  if($("#monthPicker")) $("#monthPicker").onchange = refreshAll;
  if($("#searchInput")) $("#searchInput").oninput = refreshExp;

  if($("#exportCSV")) $("#exportCSV").onclick = (e)=>{
    e.preventDefault();
    exportCSV($("#monthPicker")?.value || ym(new Date()), $("#searchInput")?.value || "");
  };
  if($("#exportJSON")) $("#exportJSON").onclick = (e)=>{ e.preventDefault(); exportJSON(); };
  if($("#exportSummary")) $("#exportSummary").onclick = ()=>{
    const curM = $("#monthPicker")?.value || ym(new Date());
    const data = { month:curM, summary: $("#monthSummary")?.innerHTML || "", generatedAt: new Date().toISOString() };
    const blob = new Blob([JSON.stringify(data,null,2)], {type:"application/json"});
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `ملخص_${curM}.json`;
    link.click();
    showToast("📄 تم تصدير الملخص بنجاح", "success");
  };
}

/* =========================================================
   Renderers
   ========================================================= */
function refreshAll(){
  const s  = getLS(K.salary,"0"); if($("#salaryInput")) $("#salaryInput").value = s || 0;
  const sv = getLS(K.saving,"0"); if($("#savingTargetInput")) $("#savingTargetInput").value = sv || 0;

  const st = getLS(K.settings,'{"cash":false,"auto":false,"roll":false}');
  if($("#cashMode")) $("#cashMode").checked = !!st.cash;
  if($("#autoDeduct")) $("#autoDeduct").checked = !!st.auto;
  if($("#rollover")) $("#rollover").checked = !!st.roll;

  const curM = $("#monthPicker")?.value || ym(new Date());
  if(st.auto) autoDeductIfDue(curM);
  if(st.roll) rolloverArrears(curM);

  refreshInst(); refreshBills(); refreshExp(); refreshOne(); refreshBudgets(); refreshSummary(); refreshCharts(); updateAlerts();
}

function refreshInst(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const L = getLS(K.inst, "[]");
  const tbody = $("#instTable tbody");
  if(!tbody) return;
  tbody.innerHTML = "";

  if(L.length===0){ tbody.innerHTML = `<tr><td colspan="7" class="text-center muted">لا توجد أقساط مضافة</td></tr>`; return; }

  L.sort((a,b)=> {
    const [pa,da,na] = priorityKey("inst",a,curM);
    const [pb,db,nb] = priorityKey("inst",b,curM);
    return pa-pb || da-db || na.localeCompare(nb);
  });

  L.forEach(item=>{
    const dueAmt = dueThisMonth(item, curM);
    const paid   = isPaid("inst", item.id, curM);
    const status = statusChip(paid, dueAmt, item, curM);
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td data-label="الاسم">${item.name}</td>
      <td data-label="المبلغ" class="fit">${fmt(item.amount)}</td>
      <td data-label="المدى" class="fit">${item.start}${item.end ? " → "+item.end : ""}</td>
      <td data-label="يوم الاستحقاق" class="fit">${item.dueDay || "آخر يوم"}</td>
      <td data-label="استحقاق هذا الشهر" class="fit">${fmt(dueAmt)}</td>
      <td data-label="الحالة" class="fit">${status}</td>
      <td data-label="الإجراءات" class="fit">
        <div class="flex gap-2">
          ${dueAmt>0 ? `<button class="btn ${paid?"ghost":"success"}" onclick="togglePaid('inst','${item.id}','${curM}')">${paid?'↩️':'✅'}</button>` : ""}
          <button class="btn danger" onclick="deleteItem('inst','${item.id}')">🗑️</button>
        </div>
      </td>`;
    tbody.appendChild(tr);
  });
}

function refreshBills(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const L = getLS(K.bills, "[]");
  const tbody = $("#billTable tbody");
  if(!tbody) return;
  tbody.innerHTML = "";

  if(L.length===0){ tbody.innerHTML = `<tr><td colspan="7" class="text-center muted">لا توجد فواتير مضافة</td></tr>`; return; }

  L.sort((a,b)=> {
    const [pa,da,na] = priorityKey("bills",a,curM);
    const [pb,db,nb] = priorityKey("bills",b,curM);
    return pa-pb || da-db || na.localeCompare(nb);
  });

  L.forEach(item=>{
    const dueAmt = dueThisMonth(item, curM);
    const paid   = isPaid("bills", item.id, curM);
    const status = statusChip(paid, dueAmt, item, curM);
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td data-label="الاسم">${item.name}</td>
      <td data-label="المبلغ" class="fit">${fmt(item.amount)}</td>
      <td data-label="المدى" class="fit">${item.start}${item.end ? " → "+item.end : ""}</td>
      <td data-label="يوم الاستحقاق" class="fit">${item.dueDay || "آخر يوم"}</td>
      <td data-label="استحقاق هذا الشهر" class="fit">${fmt(dueAmt)}</td>
      <td data-label="الحالة" class="fit">${status}</td>
      <td data-label="الإجراءات" class="fit">
        <div class="flex gap-2">
          ${dueAmt>0 ? `<button class="btn ${paid?"ghost":"success"}" onclick="togglePaid('bills','${item.id}','${curM}')">${paid?'↩️':'✅'}</button>` : ""}
          <button class="btn danger" onclick="deleteItem('bills','${item.id}')">🗑️</button>
        </div>
      </td>`;
    tbody.appendChild(tr);
  });
}

function refreshExp(){
  const curM   = $("#monthPicker")?.value || ym(new Date());
  const search = ($("#searchInput")?.value || "").toLowerCase();
  const L = getLS(K.exps, "[]");
  const tbody = $("#expTable tbody");
  if(!tbody) return;
  tbody.innerHTML = "";

  const filtered = L.filter(x=>{
    const inMonth = ym(x.date)===curM;
    const matchSearch = !search || x.cat?.toLowerCase().includes(search) || (x.note && x.note.toLowerCase().includes(search));
    return inMonth && matchSearch;
  });

  if(filtered.length===0){
    tbody.innerHTML = `<tr><td colspan="6" class="text-center muted">لا توجد مصاريف في هذا الشهر</td></tr>`;
    if($("#expShownTotal")) $("#expShownTotal").textContent = "0";
    return;
  }

  filtered.sort((a,b)=> new Date(b.date) - new Date(a.date));

  let total = 0;
  filtered.forEach(item=>{
    total += item.amount;
    const payIcon = ({cash:'💵',card:'💳',transfer:'🏦',wallet:'📱'})[item.pay] || '💰';
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td data-label="التاريخ">${item.date}</td>
      <td data-label="التصنيف"><span class="chip blue">${item.cat}</span></td>
      <td data-label="الوصف">${item.note || '—'}</td>
      <td data-label="طريقة الدفع" class="fit">${payIcon}</td>
      <td data-label="المبلغ" class="fit">${fmt(item.amount)}</td>
      <td data-label="الإجراءات" class="fit"><button class="btn danger" onclick="deleteItem('exps','${item.id}')">🗑️</button></td>
    `;
    tbody.appendChild(tr);
  });
  if($("#expShownTotal")) $("#expShownTotal").textContent = fmt(total);
}

function refreshOne(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const L = getLS(K.one, "[]");
  const tbody = $("#oneTable tbody");
  if(!tbody) return;
  tbody.innerHTML = "";

  const filtered = L.filter(x=> ym(x.date)===curM);
  if(filtered.length===0){
    tbody.innerHTML = `<tr><td colspan="6" class="text-center muted">لا توجد مصاريف خارجية في هذا الشهر</td></tr>`;
    return;
  }

  filtered.sort((a,b)=> new Date(b.date) - new Date(a.date));
  filtered.forEach(item=>{
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td data-label="التاريخ">${item.date}</td>
      <td data-label="النوع">${item.cat}</td>
      <td data-label="ملاحظة">${item.note || '—'}</td>
      <td data-label="المبلغ" class="fit">${fmt(item.amount)}</td>
      <td data-label="الحالة" class="fit"><span class="chip ${item.paid ? 'green' : 'red'}">${item.paid? '✅ مدفوع':'❌ غير مدفوع'}</span></td>
      <td data-label="الإجراءات" class="fit">
        <div class="flex gap-2">
          <button class="btn ${item.paid?'ghost':'success'}" onclick="(function(){ 
            const L=getLS('${K.one}', '[]'); const i=L.findIndex(x=>x.id=='${item.id}');
            if(i>-1){ L[i].paid = !L[i].paid; setLS('${K.one}', L); showToast('✅ تم تحديث حالة الدفع!','success'); refreshOne(); refreshSummary(); refreshCharts(); }
          })()">${item.paid? '↩️':'✅'}</button>
          <button class="btn danger" onclick="deleteItem('one','${item.id}')">🗑️</button>
        </div>
      </td>`;
    tbody.appendChild(tr);
  });
}

function refreshBudgets(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const B = getLS(K.budgets, "[]");
  const E = getLS(K.exps, "[]");
  const tbody = $("#budTable tbody");
  if(!tbody) return;
  tbody.innerHTML = "";

  if(B.length===0){ tbody.innerHTML = `<tr><td colspan="5" class="text-center muted">لا توجد ميزانيات محددة</td></tr>`; return; }

  B.forEach(b=>{
    const spent = E.filter(x=> ym(x.date)===curM && x.cat?.toLowerCase()===b.cat?.toLowerCase())
                   .reduce((s,x)=> s + x.amount, 0);
    const percentage = b.limit>0 ? (spent/b.limit)*100 : 0;
    const status = percentage>=100 ? 'red' : percentage>=80 ? 'orange' : 'green';

    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td data-label="التصنيف"><span class="chip blue">${b.cat}</span></td>
      <td data-label="الحد المحدد" class="fit">${fmt(b.limit)}</td>
      <td data-label="المصروف الحالي" class="fit">${fmt(spent)}</td>
      <td data-label="النسبة" class="fit">
        <div class="progress-bar"><div class="progress-fill" style="width:${Math.min(percentage,100)}%; background: ${status==='red'?'var(--danger)': status==='orange'?'var(--warning)':'var(--success)'}"></div></div>
        <span class="chip ${status}">${percentage.toFixed(1)}%</span>
      </td>
      <td data-label="الإجراءات" class="fit"><button class="btn danger" onclick="deleteItem('budgets','${b.id}')">🗑️</button></td>`;
    tbody.appendChild(tr);
  });
}

function refreshSummary(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const salary = +getLS(K.salary,"0");
  const savingTarget = +getLS(K.saving,"0");
  const settings = getLS(K.settings,'{"cash":false}');

  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  const exps = getLS(K.exps,"[]");
  const ones = getLS(K.one,"[]");

  let instTotal=0, billsTotal=0;
  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, curM);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst' : 'bills';
      const paid = isPaid(kind, item.id, curM);
      if(!settings.cash || paid){
        if(kind==='inst') instTotal+=dueAmt; else billsTotal+=dueAmt;
      }
    }
  });

  const expTotal = exps.filter(x=> ym(x.date)===curM).reduce((s,x)=> s+x.amount, 0);
  const oneTotal = ones.filter(x=> ym(x.date)===curM && (!settings.cash || x.paid)).reduce((s,x)=> s+x.amount, 0);

  const totalOut = instTotal + billsTotal + expTotal + oneTotal;
  const actualSaving = salary - totalOut;
  const netRemaining = actualSaving - savingTarget;

  if($("#kpiIncome")) $("#kpiIncome").textContent = fmt(salary);
  if($("#kpiOut"))    $("#kpiOut").textContent    = fmt(totalOut);
  if($("#kpiSave"))   $("#kpiSave").textContent   = fmt(actualSaving);
  if($("#kpiNet"))    $("#kpiNet").textContent    = fmt(netRemaining);

  if($("#savingProgress")){
    const savingProgress = savingTarget>0 ? (actualSaving/savingTarget)*100 : 0;
    $("#savingProgress").style.width = Math.min(savingProgress,100) + "%";
  }

  const table = $("#monthSummary");
  if(table){
    table.innerHTML = `
      <thead><tr><th>البند</th><th class="fit">المبلغ</th><th class="fit">النسبة من الدخل</th></tr></thead>
      <tbody>
        <tr><td>💰 إجمالي الدخل</td><td class="fit font-bold">${fmt(salary)}</td><td class="fit">100%</td></tr>
        <tr><td>🏦 الأقساط الثابتة</td><td class="fit">${fmt(instTotal)}</td><td class="fit">${salary>0 ? ((instTotal/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td>🧾 الفواتير الشهرية</td><td class="fit">${fmt(billsTotal)}</td><td class="fit">${salary>0 ? ((billsTotal/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td>💳 المصروفات اليومية</td><td class="fit">${fmt(expTotal)}</td><td class="fit">${salary>0 ? ((expTotal/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td>⚠️ المصروفات الخارجية</td><td class="fit">${fmt(oneTotal)}</td><td class="fit">${salary>0 ? ((oneTotal/salary)*100).toFixed(1):0}%</td></tr>
        <tr style="border-top:2px solid var(--border);"><td class="font-bold">💸 إجمالي المصروفات</td><td class="fit font-bold">${fmt(totalOut)}</td><td class="fit font-bold">${salary>0 ? ((totalOut/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td class="font-bold">🏦 الادخار الفعلي</td><td class="fit font-bold" style="color:${actualSaving>=0?'var(--success)':'var(--danger)'}">${fmt(actualSaving)}</td><td class="fit font-bold">${salary>0 ? ((actualSaving/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td>🎯 الادخار المستهدف</td><td class="fit">${fmt(savingTarget)}</td><td class="fit">${salary>0 ? ((savingTarget/salary)*100).toFixed(1):0}%</td></tr>
        <tr><td class="font-bold">💵 الصافي المتبقي</td><td class="fit font-bold" style="color:${netRemaining>=0?'var(--success)':'var(--danger)'}">${fmt(netRemaining)}</td><td class="fit">—</td></tr>
      </tbody>`;
  }
}

/* =========================================================
   Charts (Chart.js)
   ========================================================= */
let monthlyChart, breakdownChart;

function setupCharts(){
  if(typeof Chart==='undefined') return;
  Chart.defaults.font.family = 'Tajawal, system-ui, Arial';
  Chart.defaults.color = '#8da3c1';

  const monthlyCtx   = $("#chartMonthly");
  const breakdownCtx = $("#chartBreakdown");

  if(monthlyCtx){
    monthlyChart = new Chart(monthlyCtx, {
      type:'line',
      data:{ labels:[], datasets:[
        {label:'الدخل',      data:[], borderColor:'#2e90fa', backgroundColor:'rgba(46,144,250,.1)', tension:.4},
        {label:'المصروفات',  data:[], borderColor:'#ef4444', backgroundColor:'rgba(239,68,68,.1)', tension:.4},
        {label:'الادخار',    data:[], borderColor:'#10b981', backgroundColor:'rgba(16,185,129,.1)', tension:.4},
      ]},
      options:{ responsive:true, plugins:{ title:{display:true,text:'التطور الشهري للمالية'}}, scales:{ y:{beginAtZero:true} } }
    });
  }
  if(breakdownCtx){
    breakdownChart = new Chart(breakdownCtx, {
      type:'doughnut',
      data:{ labels:[], datasets:[{ data:[], backgroundColor:['#2e90fa','#7c3aed','#10b981','#f59e0b','#ef4444','#06b6d4'] }] },
      options:{ responsive:true, plugins:{ title:{display:true,text:'توزيع المصروفات'} } }
    });
  }
  refreshCharts();
}

function calculateMonthExpenses(monthStr){
  const settings = getLS(K.settings,'{"cash":false}');
  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  const exps = getLS(K.exps,"[]");
  const ones = getLS(K.one,"[]");
  let total = 0;

  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, monthStr);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst':'bills';
      const paid = isPaid(kind, item.id, monthStr);
      if(!settings.cash || paid) total += dueAmt;
    }
  });

  total += exps.filter(x=> ym(x.date)===monthStr).reduce((s,x)=> s+x.amount, 0);
  total += ones.filter(x=> ym(x.date)===monthStr && (!settings.cash || x.paid)).reduce((s,x)=> s+x.amount, 0);
  return total;
}

function calculateExpenseBreakdown(monthStr){
  const exps = getLS(K.exps,"[]").filter(x=> ym(x.date)===monthStr);
  const categories = {};
  exps.forEach(e=> { categories[e.cat] = (categories[e.cat]||0) + e.amount; });
  return { labels: Object.keys(categories), data: Object.values(categories) };
}

function refreshCharts(){
  if(typeof Chart==='undefined') return;

  const curM = $("#monthPicker")?.value || ym(new Date());
  const salary = +getLS(K.salary,"0");
  const months=[], incomes=[], expenses=[], savings=[];

  for(let i=5;i>=0;i--){
    const d = new Date(); d.setMonth(d.getMonth()-i);
    const ms = d.toISOString().slice(0,7);
    months.push(ms);
    const mExp = calculateMonthExpenses(ms);
    incomes.push(salary); expenses.push(mExp); savings.push(salary - mExp);
  }

  if(monthlyChart){
    monthlyChart.data.labels = months;
    monthlyChart.data.datasets[0].data = incomes;
    monthlyChart.data.datasets[1].data = expenses;
    monthlyChart.data.datasets[2].data = savings;
    monthlyChart.update();
  }

  const br = calculateExpenseBreakdown(curM);
  if(breakdownChart){
    breakdownChart.data.labels = br.labels;
    breakdownChart.data.datasets[0].data = br.data;
    breakdownChart.update();
  }
}

/* =========================================================
   Budgets / Warnings / Auto & Rollover
   ========================================================= */
function checkBudgetWarn(category){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const budgets = getLS(K.budgets,"[]");
  const b = budgets.find(x=> x.cat?.toLowerCase() === category?.toLowerCase());
  if(!b) return;
  const exps = getLS(K.exps,"[]");
  const spent = exps.filter(x=> ym(x.date)===curM && x.cat?.toLowerCase()===category?.toLowerCase()).reduce((s,x)=> s+x.amount,0);
  const p = (spent / b.limit) * 100;
  if(p>=100) showToast(`⚠️ تجاوزت ميزانية "${category}" بنسبة ${p.toFixed(1)}%`,"danger");
  else if(p>=80) showToast(`⚠️ اقتربت من حد ميزانية "${category}" (${p.toFixed(1)}%)`,"warning");
}

function autoDeductIfDue(yyyymm){
  const todayYM = new Date().toISOString().slice(0,7);
  if(yyyymm !== todayYM) return;

  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  let auto = 0;

  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, yyyymm);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst':'bills';
      const paid = isPaid(kind, item.id, yyyymm);
      if(!paid){
        const d = daysUntilDue(item, yyyymm);
        if(d<=0){ setPaid(kind, item.id, yyyymm, true); auto++; }
      }
    }
  });

  if(auto>0) showToast(`⚡ تم خصم ${auto} عنصر تلقائياً`,"success");
}

function rolloverArrears(yyyymm){
  const prevM = prevMonthStr(yyyymm);
  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  const ones = getLS(K.one,"[]");
  let rolled = 0;

  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, prevM);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst':'bills';
      const paid = isPaid(kind, item.id, prevM);
      if(!paid){
        const r = {
          id: (crypto.randomUUID?.() || Date.now().toString(36)),
          date: yyyymm + "-01",
          cat: "ترحيل متأخر",
          note: `${item.name} (${prevM})`,
          amount: dueAmt,
          paid: false
        };
        const exists = ones.find(x=> x.note===r.note && ym(x.date)===yyyymm);
        if(!exists){ ones.push(r); rolled++; }
      }
    }
  });
  if(rolled>0){ setLS(K.one, ones); showToast(`📋 تم ترحيل ${rolled} عنصر متأخر`,"warning"); }
}

/* =========================================================
   Alerts / Navigation / Theme
   ========================================================= */
function updateAlerts(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const current = new Date().toISOString().slice(0,7);
  if(curM !== current){ if($("#alertsCount")) $("#alertsCount").style.display="none"; return; }

  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  let alerts = 0;
  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, curM);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst':'bills';
      const paid = isPaid(kind, item.id, curM);
      if(!paid && daysUntilDue(item, curM)<=3) alerts++;
    }
  });

  if($("#alertsCount")){
    if(alerts>0){ $("#alertsCount").style.display="block"; if($("#alertsText")) $("#alertsText").textContent = `${alerts} تنبيه`; }
    else { $("#alertsCount").style.display="none"; }
  }
}

function updateActiveNavigation(){
  const sections = $$('section[id]');
  const navLinks = $$('.bottom-nav a');
  let currentSection = '';
  sections.forEach(s=>{
    const r = s.getBoundingClientRect();
    if(r.top<=100 && r.bottom>=100) currentSection = s.id;
  });
  navLinks.forEach(a=>{
    const href = a.getAttribute('href');
    if(href === '#'+currentSection) a.classList.add('active');
    else a.classList.remove('active');
  });
}

function applyTheme(theme){
  if(theme==="light"){ document.documentElement.classList.add("light"); localStorage.setItem("theme","light"); if($("#themeToggle")) $("#themeToggle").checked = true; }
  else { document.documentElement.classList.remove("light"); localStorage.setItem("theme","dark"); if($("#themeToggle")) $("#themeToggle").checked = false; }
}

/* =========================================================
   Import / Export (Files)
   ========================================================= */
function exportCSV(month, search){
  const exps = getLS(K.exps,"[]");
  const filtered = exps.filter(x=>{
    const inMonth = ym(x.date)===month;
    const s = (search||"").toLowerCase();
    const match = !s || x.cat?.toLowerCase().includes(s) || (x.note && x.note.toLowerCase().includes(s));
    return inMonth && match;
  });
  if(filtered.length===0){ showToast("⚠️ لا توجد بيانات للتصدير","warning"); return; }

  const headers = ["التاريخ","التصنيف","الملاحظة","طريقة الدفع","المبلغ"];
  const rows = filtered.map(x=> [x.date, x.cat, x.note||"", x.pay, x.amount]);
  const csv = [headers, ...rows].map(r=> r.map(f=> `"${String(f).replace(/"/g,'""')}"`).join(",")).join("\n");
  const blob = new Blob(["\ufeff"+csv], {type:"text/csv;charset=utf-8;"});
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = `مصاريف_${month}.csv`;
  link.click();
  showToast("📄 تم تصدير البيانات بنجاح","success");
}

function exportJSON(){
  const data = {
    salary: getLS(K.salary,"0"),
    saving: getLS(K.saving,"0"),
    settings: getLS(K.settings,"{}"),
    installments: getLS(K.inst,"[]"),
    bills: getLS(K.bills,"[]"),
    expenses: getLS(K.exps,"[]"),
    external: getLS(K.one,"[]"),
    budgets: getLS(K.budgets,"[]"),
    paid: getLS(K.paid,"{}"),
    exportDate: new Date().toISOString()
  };
  const blob = new Blob([JSON.stringify(data,null,2)], {type:"application/json"});
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = `backup_${new Date().toISOString().slice(0,10)}.json`;
  link.click();
  showToast("📋 تم تصدير النسخة الاحتياطية بنجاح","success");
}

function bindImport(){
  if($("#importData")){
    $("#importData").onclick = ()=>{
      const m = $("#importModal"); if(m){ m.classList.add("show"); document.body.style.overflow="hidden"; }
    };
  }
  if($("#importCancel")){
    $("#importCancel").onclick = ()=>{
      const m = $("#importModal"); if(m){ m.classList.remove("show"); document.body.style.overflow=""; }
    };
  }
  if($("#importConfirm")){
    $("#importConfirm").onclick = ()=>{
      const f = $("#importFile")?.files?.[0];
      if(!f){ showToast("⚠️ يرجى اختيار ملف للاستيراد","warning"); return; }
      const reader = new FileReader();
      reader.onload = (e)=>{
        try{
          const data = JSON.parse(e.target.result);
          if(data.salary)      setLS(K.salary, data.salary);
          if(data.saving)      setLS(K.saving, data.saving);
          if(data.settings)    setLS(K.settings, data.settings);
          if(data.installments)setLS(K.inst, data.installments);
          if(data.bills)       setLS(K.bills, data.bills);
          if(data.expenses)    setLS(K.exps, data.expenses);
          if(data.external)    setLS(K.one, data.external);
          if(data.budgets)     setLS(K.budgets, data.budgets);
          if(data.paid)        setLS(K.paid, data.paid);
          showToast("✅ تم استيراد البيانات بنجاح!","success");
          refreshAll();
          const m = $("#importModal"); if(m){ m.classList.remove("show"); document.body.style.overflow=""; }
        }catch{ showToast("❌ خطأ في قراءة الملف","danger"); }
      };
      reader.readAsText(f);
    };
  }
}

/* =========================================================
   Quick Add (Modal)
   ========================================================= */
function bindQuickAdd(){
  const fab = $("#fabAdd");
  const modal = $("#quickModal");
  function openQuick(){
    if(!modal) return;
    if($("#qDate")) $("#qDate").value = today;
    if($("#qCat"))  $("#qCat").value  = "";
    if($("#qAmount")) $("#qAmount").value = "";
    if($("#qNote")) $("#qNote").value = "";
    if($("#qPay"))  $("#qPay").value  = "cash";
    modal.classList.add("show"); document.body.style.overflow="hidden";
  }
  function closeQuick(){
    if(!modal) return;
    modal.classList.remove("show"); document.body.style.overflow="";
  }
  if(fab) fab.onclick = openQuick;
  if(modal) modal.addEventListener("click",(e)=>{ if(e.target.id==="quickModal") closeQuick(); });
  if($("#qCancel")) $("#qCancel").onclick = (e)=>{ e.preventDefault(); closeQuick(); };
  if($("#quickForm")){
    $("#quickForm").onsubmit = (e)=>{
      e.preventDefault();
      const date = $("#qDate")?.value;
      const cat  = $("#qCat")?.value?.trim();
      const note = $("#qNote")?.value?.trim();
      const pay  = $("#qPay")?.value;
      const amount = +($("#qAmount")?.value || 0);
      if(!date || !cat || !amount){ showToast("⚠️ يرجى ملء جميع الحقول المطلوبة","warning"); return; }
      const L = getLS(K.exps,"[]");
      const rec = { id:(crypto.randomUUID?.() || Date.now().toString(36)), date, cat, note, pay, amount };
      L.push(rec); setLS(K.exps, L);
      closeQuick(); showToast("✅ تم إضافة المصروف بنجاح!","success");
      refreshExp(); refreshBudgets(); refreshSummary(); refreshCharts(); checkBudgetWarn(rec.cat);
    };
  }
}

/* =========================================================
   Reports / Comparison
   ========================================================= */
function calculateDetailedMonthData(monthStr){
  const settings = getLS(K.settings,'{"cash":false}');
  const inst = getLS(K.inst,"[]");
  const bills= getLS(K.bills,"[]");
  const exps = getLS(K.exps,"[]");
  const ones = getLS(K.one,"[]");
  let installments=0, billsTotal=0;

  [...inst, ...bills].forEach(item=>{
    const dueAmt = dueThisMonth(item, monthStr);
    if(dueAmt>0){
      const kind = inst.includes(item)? 'inst':'bills';
      const paid = isPaid(kind, item.id, monthStr);
      if(!settings.cash || paid){ if(kind==='inst') installments+=dueAmt; else billsTotal+=dueAmt; }
    }
  });

  const dailyExpenses = exps.filter(x=> ym(x.date)===monthStr).reduce((s,x)=> s+x.amount,0);
  const external      = ones.filter(x=> ym(x.date)===monthStr && (!settings.cash || x.paid)).reduce((s,x)=> s+x.amount,0);
  const totalExpenses = installments + billsTotal + dailyExpenses + external;
  const salary = +getLS(K.salary,"0");
  const actualSaving = salary - totalExpenses;

  return { installments, bills:billsTotal, dailyExpenses, external, totalExpenses, actualSaving };
}

function generateBudgetAnalysis(monthStr){
  const budgets = getLS(K.budgets,"[]");
  const exps = getLS(K.exps,"[]");
  if(budgets.length===0) return '<p style="color:#666;font-style:italic;">لم يتم تحديد أي ميزانيات بعد.</p>';
  let html = `<table style="width:100%;border-collapse:collapse;margin-top:15px">
  <thead><tr style="background:#f8fafc"><th style="padding:12px;border:1px solid #e2e8f0;text-align:right">التصنيف</th><th style="padding:12px;border:1px solid #e2e8f0;text-align:right">الميزانية</th><th style="padding:12px;border:1px solid #e2e8f0;text-align:right">المصروف</th><th style="padding:12px;border:1px solid #e2e8f0;text-align:right">النسبة</th><th style="padding:12px;border:1px solid #e2e8f0;text-align:right">الحالة</th></tr></thead><tbody>`;
  budgets.forEach(b=>{
    const spent = exps.filter(x=> ym(x.date)===monthStr && x.cat?.toLowerCase()===b.cat?.toLowerCase()).reduce((s,x)=> s+x.amount,0);
    const p = b.limit>0 ? (spent/b.limit)*100 : 0;
    const status = p>=100 ? '🔴 تجاوز' : p>=80 ? '🟡 تحذير' : '🟢 جيد';
    const color  = p>=100 ? '#ef4444' : p>=80 ? '#f59e0b' : '#10b981';
    html += `<tr><td style="padding:12px;border:1px solid #e2e8f0">${b.cat}</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(b.limit)}</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(spent)}</td><td style="padding:12px;border:1px solid #e2e8f0">${p.toFixed(1)}%</td><td style="padding:12px;border:1px solid #e2e8f0;color:${color};font-weight:bold">${status}</td></tr>`;
  });
  html += `</tbody></table>`;
  return html;
}

function generateFinancialRecommendations(monthData, salary, savingTarget){
  const rec = [];
  const savingRate = salary>0 ? (monthData.actualSaving/salary)*100 : 0;
  if(savingRate < 10) rec.push('💡 نسبة الادخار منخفضة جداً. حاول تقليل المصروفات غير الضرورية.');
  else if(savingRate < 20) rec.push('👍 نسبة ادخار جيدة، يمكن تحسينها أكثر.');
  else rec.push('🌟 ممتاز! نسبة ادخار عالية جداً.');

  const dailyRate = salary>0 ? (monthData.dailyExpenses/salary)*100 : 0;
  if(dailyRate > 30) rec.push('⚠️ المصروفات اليومية مرتفعة. راجع العادات الاستهلاكية.');

  const fixedRate = salary>0 ? ((monthData.installments + monthData.bills)/salary)*100 : 0;
  if(fixedRate > 50) rec.push('🏦 الالتزامات الثابتة مرتفعة. فكّر في إعادة هيكلة الديون.');

  if(monthData.external > 0) rec.push('📋 لديك مصروفات خارجية. خطّط لها مسبقًا.');

  if(monthData.actualSaving < savingTarget){
    const deficit = savingTarget - monthData.actualSaving;
    rec.push(`🎯 تحتاج لتوفير ${fmt(deficit)} إضافية لتحقيق هدف الادخار.`);
  }
  if(rec.length===0) rec.push('🎉 وضعك المالي ممتاز! استمر.');

  return '<ul style="padding-right:20px">'+ rec.map(x=> `<li style="margin-bottom:10px;line-height:1.6">${x}</li>`).join('') +'</ul>';
}

function generateDetailedReport(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const salary = +getLS(K.salary,"0");
  const savingTarget = +getLS(K.saving,"0");
  const md = calculateDetailedMonthData(curM);

  const html = `
  <div style="font-family:Tajawal,Arial;direction:rtl;padding:20px;background:white;color:#333">
    <div style="text-align:center;margin-bottom:30px">
      <h1 style="color:#2e90fa;margin-bottom:10px">📊 التقرير المالي المفصل</h1>
      <h2 style="color:#666;font-weight:normal">شهر ${curM}</h2>
      <p style="color:#888;font-size:14px">تم إنشاؤه في: ${new Date().toLocaleString('ar-EG')}</p>
    </div>
    <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:20px;margin-bottom:30px">
      <div style="background:linear-gradient(135deg,#2e90fa,#1d4ed8);color:#fff;padding:20px;border-radius:12px;text-align:center"><h3>💰 إجمالي الدخل</h3><p style="font-size:24px;font-weight:bold">${fmt(salary)}</p></div>
      <div style="background:linear-gradient(135deg,#ef4444,#dc2626);color:#fff;padding:20px;border-radius:12px;text-align:center"><h3>💸 إجمالي المصروفات</h3><p style="font-size:24px;font-weight:bold">${fmt(md.totalExpenses)}</p></div>
      <div style="background:linear-gradient(135deg,#10b981,#059669);color:#fff;padding:20px;border-radius:12px;text-align:center"><h3>🏦 الادخار الفعلي</h3><p style="font-size:24px;font-weight:bold">${fmt(md.actualSaving)}</p></div>
      <div style="background:linear-gradient(135deg,#7c3aed,#5b21b6);color:#fff;padding:20px;border-radius:12px;text-align:center"><h3>🎯 نسبة تحقيق الهدف</h3><p style="font-size:24px;font-weight:bold">${savingTarget>0 ? ((md.actualSaving/savingTarget)*100).toFixed(1):0}%</p></div>
    </div>
    <div style="margin-bottom:30px">
      <h3 style="color:#2e90fa;border-bottom:2px solid #2e90fa;padding-bottom:10px">📋 تفصيل المصروفات</h3>
      <table style="width:100%;border-collapse:collapse;margin-top:15px">
        <thead><tr style="background:#f8fafc"><th style="padding:12px;border:1px solid #e2e8f0">الفئة</th><th style="padding:12px;border:1px solid #e2e8f0">المبلغ</th><th style="padding:12px;border:1px solid #e2e8f0">النسبة من الدخل</th></tr></thead>
        <tbody>
          <tr><td style="padding:12px;border:1px solid #e2e8f0">🏦 الأقساط الثابتة</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(md.installments)}</td><td style="padding:12px;border:1px solid #e2e8f0">${salary>0 ? ((md.installments/salary)*100).toFixed(1):0}%</td></tr>
          <tr><td style="padding:12px;border:1px solid #e2e8f0">🧾 الفواتير الشهرية</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(md.bills)}</td><td style="padding:12px;border:1px solid #e2e8f0">${salary>0 ? ((md.bills/salary)*100).toFixed(1):0}%</td></tr>
          <tr><td style="padding:12px;border:1px solid #e2e8f0">💳 المصروفات اليومية</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(md.dailyExpenses)}</td><td style="padding:12px;border:1px solid #e2e8f0">${salary>0 ? ((md.dailyExpenses/salary)*100).toFixed(1):0}%</td></tr>
          <tr><td style="padding:12px;border:1px solid #e2e8f0">⚠️ المصروفات الخارجية</td><td style="padding:12px;border:1px solid #e2e8f0">${fmt(md.external)}</td><td style="padding:12px;border:1px solid #e2e8f0">${salary>0 ? ((md.external/salary)*100).toFixed(1):0}%</td></tr>
        </tbody>
      </table>
    </div>
    <div style="margin-bottom:30px">
      <h3 style="color:#2e90fa;border-bottom:2px solid #2e90fa;padding-bottom:10px">🎯 تحليل الميزانيات</h3>
      ${generateBudgetAnalysis(curM)}
    </div>
    <div style="margin-bottom:30px">
      <h3 style="color:#2e90fa;border-bottom:2px solid #2e90fa;padding-bottom:10px">📈 التوصيات المالية</h3>
      ${generateFinancialRecommendations(md, +getLS(K.salary,"0"), +getLS(K.saving,"0"))}
    </div>
    <div style="text-align:center;margin-top:40px;padding-top:20px;border-top:1px solid #e2e8f0;color:#666;font-size:12px">
      <p>تم إنشاء هذا التقرير بواسطة تطبيق إدارة مالي المطور v3.0</p>
    </div>
  </div>`;
  const w = window.open('','_blank'); w.document.write(html); w.document.close();
  showToast("📊 تم إنشاء التقرير المفصل بنجاح!","success");
}

function generateComparisonCard(title, prevValue, currentValue){
  const change = currentValue - prevValue;
  const p = prevValue>0 ? ((change/prevValue)*100) : 0;
  const pos = change>=0; const arrow = pos?'↗️':'↘️';
  const color = title.includes('الادخار') ? (pos?'#10b981':'#ef4444') : (pos?'#ef4444':'#10b981');
  return `
  <div style="background:linear-gradient(135deg,#f8fafc,#e2e8f0);padding:20px;border-radius:12px;border:1px solid #cbd5e1">
    <h3 style="margin:0 0 15px 0;color:#334155">${title}</h3>
    <div style="display:flex;justify-content:space-between;margin-bottom:10px"><span style="color:#64748b">الشهر السابق:</span><span style="font-weight:bold">${fmt(prevValue)}</span></div>
    <div style="display:flex;justify-content:space-between;margin-bottom:15px"><span style="color:#64748b">الشهر الحالي:</span><span style="font-weight:bold">${fmt(currentValue)}</span></div>
    <div style="text-align:center;padding:10px;background:#fff;border-radius:8px;border:1px solid #e2e8f0">
      <span style="color:${color};font-weight:bold;font-size:16px">${arrow} ${fmt(Math.abs(change))} (${Math.abs(p).toFixed(1)}%)</span>
    </div>
  </div>`;
}
function generateComparisonAnalysis(prevData, currentData){
  const arr=[]; const expDiff = currentData.totalExpenses - prevData.totalExpenses;
  const savDiff = currentData.actualSaving - prevData.actualSaving;
  if(expDiff>0) arr.push(`📈 زادت مصروفاتك بمقدار ${fmt(expDiff)} مقارنة بالشهر السابق.`);
  else if(expDiff<0) arr.push(`📉 انخفضت مصروفاتك بمقدار ${fmt(Math.abs(expDiff))} مقارنة بالشهر السابق.`);
  else arr.push(`➡️ مصروفاتك مستقرة مقارنة بالشهر السابق.`);
  if(savDiff>0) arr.push(`🎉 تحسن ادخارك بمقدار ${fmt(savDiff)} - أحسنت!`);
  else if(savDiff<0) arr.push(`⚠️ انخفض ادخارك بمقدار ${fmt(Math.abs(savDiff))} - راجع مصروفاتك.`);
  else arr.push(`➡️ ادخارك مستقر مقارنة بالشهر السابق.`);
  return `<div style="background:#f1f5f9;padding:20px;border-radius:12px;text-align:right">${arr.map(p=>`<p style="margin:10px 0;line-height:1.6">${p}</p>`).join("")}</div>`;
}
function showMonthComparison(){
  const curM = $("#monthPicker")?.value || ym(new Date());
  const prevM = prevMonthStr(curM);
  const c = calculateDetailedMonthData(curM);
  const p = calculateDetailedMonthData(prevM);
  const html = `
  <div style="font-family:Tajawal,Arial;direction:rtl;padding:20px;background:white;color:#333">
    <div style="text-align:center;margin-bottom:30px">
      <h1 style="color:#2e90fa;margin-bottom:10px">📈 مقارنة الأشهر</h1>
      <h2 style="color:#666;font-weight:normal">${prevM} مقابل ${curM}</h2>
    </div>
    <div style="display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px">
      ${generateComparisonCard('💸 إجمالي المصروفات', p.totalExpenses, c.totalExpenses)}
      ${generateComparisonCard('🏦 الادخار الفعلي', p.actualSaving, c.actualSaving)}
      ${generateComparisonCard('💳 المصروفات اليومية', p.dailyExpenses, c.dailyExpenses)}
      ${generateComparisonCard('🏦 الأقساط والفواتير', p.installments+p.bills, c.installments+c.bills)}
    </div>
    <div style="margin-top:30px;text-align:center">
      <h3 style="color:#2e90fa">📊 التحليل</h3>
      ${generateComparisonAnalysis(p, c)}
    </div>
  </div>`;
  const w = window.open('','_blank'); w.document.write(html); w.document.close();
  showToast("📈 تم إنشاء مقارنة الأشهر بنجاح!","success");
}

/* =========================================================
   Keyboard / Init
   ========================================================= */
function bindShortcuts(){
  document.addEventListener('keydown', (e)=>{
    if(e.ctrlKey || e.metaKey){
      switch(e.key){
        case 's': e.preventDefault(); $("#saveSettingsBtn")?.click(); break;
        case 'n': e.preventDefault(); $("#fabAdd")?.click(); break;
        case 'e': e.preventDefault(); $("#exportJSON")?.click(); break;
      }
    }
    if(e.key==='Escape'){
      const m = $("#quickModal"); if(m && m.classList.contains('show')){ m.classList.remove('show'); document.body.style.overflow=""; }
      const i = $("#importModal"); if(i && i.classList.contains('show')){ i.classList.remove('show'); document.body.style.overflow=""; }
    }
  });
}

function safeDefaults(){
  if($("#monthPicker")) $("#monthPicker").value = ym(new Date());
  if($("#expDate"))  $("#expDate").value  = today;
  if($("#qDate"))    $("#qDate").value    = today;
  if($("#oneDate"))  $("#oneDate").value  = today;
}

function bindTheme(){
  if($("#themeToggle")){
    $("#themeToggle").addEventListener('change', ()=>{
      applyTheme($("#themeToggle").checked ? "light" : "dark");
      showToast($("#themeToggle").checked ? "🌞 تم التبديل للوضع الفاتح" : "🌙 تم التبديل للوضع الداكن", "success");
    });
  }
  applyTheme(localStorage.getItem("theme") || "dark");
}

function bindReports(){
  if($("#generateReport")) $("#generateReport").onclick = ()=> generateDetailedReport();
  if($("#compareMonths")) $("#compareMonths").onclick = ()=> showMonthComparison();
}

function bindNavigation(){
  window.addEventListener('scroll', updateActiveNavigation);
}

/* =========================================================
   INIT
   ========================================================= */
document.addEventListener('DOMContentLoaded', ()=>{
  safeDefaults();
  bindForms();
  bindFiltersAndExport();
  bindImport();
  bindQuickAdd();
  bindTheme();
  bindReports();
  bindNavigation();
  bindShortcuts();

  setupCharts();
  refreshAll();
  updateActiveNavigation();

  // تأثير بسيط على البطاقات إن وجدت
  $$('.card').forEach(c=>{
    c.addEventListener('mouseenter', ()=> c.style.transform='translateY(-4px)');
    c.addEventListener('mouseleave', ()=> c.style.transform='translateY(0)');
  });

  showToast("🎉 مرحباً بك في إدارة مالي المطور!", "success");
  // تحديث دوري للتنبيهات
  setInterval(updateAlerts, 60000);
});

  
